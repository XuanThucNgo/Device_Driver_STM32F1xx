
driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a1c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b4c  08000b4c  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b4c  08000b4c  0000202c  2**0
                  CONTENTS
  4 .ARM          00000008  08000b4c  08000b4c  00001b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b54  08000b54  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b54  08000b54  00001b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b58  08000b58  00001b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08000b5c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000002c  08000b88  0000202c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000b88  00002070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000172d  00000000  00000000  00002055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000731  00000000  00000000  00003782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00003eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000166  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004711  00000000  00000000  00004206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000223c  00000000  00000000  00008917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000e208  00000000  00000000  0000ab53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00018d5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006f8  00000000  00000000  00018da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000039  00000000  00000000  00019498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b34 	.word	0x08000b34

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08000b34 	.word	0x08000b34

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <I2C1_GPIOInits>:
 */

uint8_t data[] = "Hello XuanThuc \n";

void I2C1_GPIOInits(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
    GPIO_Handle_t I2CPins;

    I2CPins.pGPIOx = GPIOB;
 8000186:	4b09      	ldr	r3, [pc, #36]	@ (80001ac <I2C1_GPIOInits+0x2c>)
 8000188:	603b      	str	r3, [r7, #0]
    I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF_OUTPUT_OD_10MHz;
 800018a:	230d      	movs	r3, #13
 800018c:	717b      	strb	r3, [r7, #5]
    I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800018e:	2301      	movs	r3, #1
 8000190:	71bb      	strb	r3, [r7, #6]

    //SCL
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 8000192:	2306      	movs	r3, #6
 8000194:	713b      	strb	r3, [r7, #4]
    //SDA
    I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 8000196:	2307      	movs	r3, #7
 8000198:	713b      	strb	r3, [r7, #4]

    GPIO_Init(&I2CPins);
 800019a:	463b      	mov	r3, r7
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f951 	bl	8000444 <GPIO_Init>
}
 80001a2:	bf00      	nop
 80001a4:	3708      	adds	r7, #8
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010c00 	.word	0x40010c00

080001b0 <I2C1_Inits>:

void I2C1_Inits(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	af00      	add	r7, sp, #0
    I2C1Handle.pI2Cx = I2C1;
 80001b4:	4b0a      	ldr	r3, [pc, #40]	@ (80001e0 <I2C1_Inits+0x30>)
 80001b6:	4a0b      	ldr	r2, [pc, #44]	@ (80001e4 <I2C1_Inits+0x34>)
 80001b8:	601a      	str	r2, [r3, #0]
    I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80001ba:	4b09      	ldr	r3, [pc, #36]	@ (80001e0 <I2C1_Inits+0x30>)
 80001bc:	2201      	movs	r2, #1
 80001be:	725a      	strb	r2, [r3, #9]
    I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 80001c0:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <I2C1_Inits+0x30>)
 80001c2:	2261      	movs	r2, #97	@ 0x61
 80001c4:	721a      	strb	r2, [r3, #8]
    I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 80001c6:	4b06      	ldr	r3, [pc, #24]	@ (80001e0 <I2C1_Inits+0x30>)
 80001c8:	2200      	movs	r2, #0
 80001ca:	729a      	strb	r2, [r3, #10]
    I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <I2C1_Inits+0x30>)
 80001ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80001d2:	605a      	str	r2, [r3, #4]

    I2C_Init(&I2C1Handle);
 80001d4:	4802      	ldr	r0, [pc, #8]	@ (80001e0 <I2C1_Inits+0x30>)
 80001d6:	f000 fad9 	bl	800078c <I2C_Init>
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000048 	.word	0x20000048
 80001e4:	40005400 	.word	0x40005400

080001e8 <main>:

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af02      	add	r7, sp, #8
    I2C1_GPIOInits();
 80001ee:	f7ff ffc7 	bl	8000180 <I2C1_GPIOInits>
    I2C1_Inits();
 80001f2:	f7ff ffdd 	bl	80001b0 <I2C1_Inits>

    I2C_PeripheralControl(I2C1, ENABLE);
 80001f6:	2101      	movs	r1, #1
 80001f8:	4808      	ldr	r0, [pc, #32]	@ (800021c <main+0x34>)
 80001fa:	f000 fa6c 	bl	80006d6 <I2C_PeripheralControl>

    while (1)
    {
        //Send some data to slave
        I2C_MasterSendData(&I2C1Handle, strlen((char *)data), 8, SLAVE_ADDR, 0);
 80001fe:	4808      	ldr	r0, [pc, #32]	@ (8000220 <main+0x38>)
 8000200:	f7ff ffb6 	bl	8000170 <strlen>
 8000204:	4603      	mov	r3, r0
 8000206:	4619      	mov	r1, r3
 8000208:	2300      	movs	r3, #0
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	2368      	movs	r3, #104	@ 0x68
 800020e:	2208      	movs	r2, #8
 8000210:	4804      	ldr	r0, [pc, #16]	@ (8000224 <main+0x3c>)
 8000212:	f000 fb8f 	bl	8000934 <I2C_MasterSendData>
        while(1);
 8000216:	bf00      	nop
 8000218:	e7fd      	b.n	8000216 <main+0x2e>
 800021a:	bf00      	nop
 800021c:	40005400 	.word	0x40005400
 8000220:	20000000 	.word	0x20000000
 8000224:	20000048 	.word	0x20000048

08000228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000228:	480d      	ldr	r0, [pc, #52]	@ (8000260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800022c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000230:	480c      	ldr	r0, [pc, #48]	@ (8000264 <LoopForever+0x6>)
  ldr r1, =_edata
 8000232:	490d      	ldr	r1, [pc, #52]	@ (8000268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000234:	4a0d      	ldr	r2, [pc, #52]	@ (800026c <LoopForever+0xe>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000238:	e002      	b.n	8000240 <LoopCopyDataInit>

0800023a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800023c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800023e:	3304      	adds	r3, #4

08000240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000244:	d3f9      	bcc.n	800023a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000246:	4a0a      	ldr	r2, [pc, #40]	@ (8000270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000248:	4c0a      	ldr	r4, [pc, #40]	@ (8000274 <LoopForever+0x16>)
  movs r3, #0
 800024a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800024c:	e001      	b.n	8000252 <LoopFillZerobss>

0800024e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800024e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000250:	3204      	adds	r2, #4

08000252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000254:	d3fb      	bcc.n	800024e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000256:	f000 fc49 	bl	8000aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025a:	f7ff ffc5 	bl	80001e8 <main>

0800025e <LoopForever>:

LoopForever:
  b LoopForever
 800025e:	e7fe      	b.n	800025e <LoopForever>
  ldr   r0, =_estack
 8000260:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000268:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800026c:	08000b5c 	.word	0x08000b5c
  ldr r2, =_sbss
 8000270:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000274:	20000070 	.word	0x20000070

08000278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000278:	e7fe      	b.n	8000278 <ADC1_2_IRQHandler>
	...

0800027c <GPIO_PeriClockControl>:
 *      Author: ADMIN
 */
#include <stm32f1_gpio.h>

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	460b      	mov	r3, r1
 8000286:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE)
 8000288:	78fb      	ldrb	r3, [r7, #3]
 800028a:	2b01      	cmp	r3, #1
 800028c:	d136      	bne.n	80002fc <GPIO_PeriClockControl+0x80>
    {
        if (pGPIOx == GPIOA)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4a38      	ldr	r2, [pc, #224]	@ (8000374 <GPIO_PeriClockControl+0xf8>)
 8000292:	4293      	cmp	r3, r2
 8000294:	d106      	bne.n	80002a4 <GPIO_PeriClockControl+0x28>
        {
            GPIOA_PCLK_EN();
 8000296:	4b38      	ldr	r3, [pc, #224]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a37      	ldr	r2, [pc, #220]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 800029c:	f043 0304 	orr.w	r3, r3, #4
 80002a0:	6193      	str	r3, [r2, #24]
        else if (pGPIOx == GPIOE)
        {
            GPIOE_PCLK_DI();
        }
    }
}
 80002a2:	e061      	b.n	8000368 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOB)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	4a35      	ldr	r2, [pc, #212]	@ (800037c <GPIO_PeriClockControl+0x100>)
 80002a8:	4293      	cmp	r3, r2
 80002aa:	d106      	bne.n	80002ba <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 80002ac:	4b32      	ldr	r3, [pc, #200]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a31      	ldr	r2, [pc, #196]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6193      	str	r3, [r2, #24]
}
 80002b8:	e056      	b.n	8000368 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOC)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4a30      	ldr	r2, [pc, #192]	@ (8000380 <GPIO_PeriClockControl+0x104>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 80002c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 80002c8:	f043 0310 	orr.w	r3, r3, #16
 80002cc:	6193      	str	r3, [r2, #24]
}
 80002ce:	e04b      	b.n	8000368 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOD)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000384 <GPIO_PeriClockControl+0x108>)
 80002d4:	4293      	cmp	r3, r2
 80002d6:	d106      	bne.n	80002e6 <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 80002d8:	4b27      	ldr	r3, [pc, #156]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a26      	ldr	r2, [pc, #152]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
}
 80002e4:	e040      	b.n	8000368 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOE)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a27      	ldr	r2, [pc, #156]	@ (8000388 <GPIO_PeriClockControl+0x10c>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d13c      	bne.n	8000368 <GPIO_PeriClockControl+0xec>
            GPIOE_PCLK_EN();
 80002ee:	4b22      	ldr	r3, [pc, #136]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a21      	ldr	r2, [pc, #132]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 80002f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002f8:	6193      	str	r3, [r2, #24]
}
 80002fa:	e035      	b.n	8000368 <GPIO_PeriClockControl+0xec>
        if (pGPIOx == GPIOA)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4a1d      	ldr	r2, [pc, #116]	@ (8000374 <GPIO_PeriClockControl+0xf8>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d106      	bne.n	8000312 <GPIO_PeriClockControl+0x96>
            GPIOA_PCLK_DI();
 8000304:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a1b      	ldr	r2, [pc, #108]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 800030a:	f023 0304 	bic.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
}
 8000310:	e02a      	b.n	8000368 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOB)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a19      	ldr	r2, [pc, #100]	@ (800037c <GPIO_PeriClockControl+0x100>)
 8000316:	4293      	cmp	r3, r2
 8000318:	d106      	bne.n	8000328 <GPIO_PeriClockControl+0xac>
            GPIOB_PCLK_DI();
 800031a:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a16      	ldr	r2, [pc, #88]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 8000320:	f023 0308 	bic.w	r3, r3, #8
 8000324:	6193      	str	r3, [r2, #24]
}
 8000326:	e01f      	b.n	8000368 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOC)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	4a15      	ldr	r2, [pc, #84]	@ (8000380 <GPIO_PeriClockControl+0x104>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d106      	bne.n	800033e <GPIO_PeriClockControl+0xc2>
            GPIOC_PCLK_DI();
 8000330:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a10      	ldr	r2, [pc, #64]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 8000336:	f023 0310 	bic.w	r3, r3, #16
 800033a:	6193      	str	r3, [r2, #24]
}
 800033c:	e014      	b.n	8000368 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOD)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <GPIO_PeriClockControl+0x108>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_PeriClockControl+0xd8>
            GPIOD_PCLK_DI();
 8000346:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 8000348:	699b      	ldr	r3, [r3, #24]
 800034a:	4a0b      	ldr	r2, [pc, #44]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 800034c:	f023 0320 	bic.w	r3, r3, #32
 8000350:	6193      	str	r3, [r2, #24]
}
 8000352:	e009      	b.n	8000368 <GPIO_PeriClockControl+0xec>
        else if (pGPIOx == GPIOE)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	4a0c      	ldr	r2, [pc, #48]	@ (8000388 <GPIO_PeriClockControl+0x10c>)
 8000358:	4293      	cmp	r3, r2
 800035a:	d105      	bne.n	8000368 <GPIO_PeriClockControl+0xec>
            GPIOE_PCLK_DI();
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <GPIO_PeriClockControl+0xfc>)
 8000362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000366:	6193      	str	r3, [r2, #24]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40010800 	.word	0x40010800
 8000378:	40021000 	.word	0x40021000
 800037c:	40010c00 	.word	0x40010c00
 8000380:	40011000 	.word	0x40011000
 8000384:	40011400 	.word	0x40011400
 8000388:	40011800 	.word	0x40011800

0800038c <GPIO_ConfigMode>:

void GPIO_ConfigMode(GPIO_Handle_t *pGPIOHandle) {
 800038c:	b480      	push	{r7}
 800038e:	b089      	sub	sp, #36	@ 0x24
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
//    temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
//
//    pGPIOHandle->pGPIOx->CR[temp1] &= ~(0x4 << (4 * temp2));                                     // reset
//    pGPIOHandle->pGPIOx->CR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (4 * temp2)); // set
    
    uint32_t reset = 0, set = 0;
 8000394:	2300      	movs	r3, #0
 8000396:	61fb      	str	r3, [r7, #28]
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
    uint32_t pinNumber = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	791b      	ldrb	r3, [r3, #4]
 80003a0:	617b      	str	r3, [r7, #20]
    uint32_t mode = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode;
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	795b      	ldrb	r3, [r3, #5]
 80003a6:	613b      	str	r3, [r7, #16]
    if (pinNumber <= 7) {
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	2b07      	cmp	r3, #7
 80003ac:	d81f      	bhi.n	80003ee <GPIO_ConfigMode+0x62>
        // Configure CRL (Pins 0-7)
        uint8_t position = pinNumber * 4;
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	73bb      	strb	r3, [r7, #14]
        reset = 0xF << position;
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	220f      	movs	r2, #15
 80003ba:	fa02 f303 	lsl.w	r3, r2, r3
 80003be:	61fb      	str	r3, [r7, #28]
        set = mode << position;
 80003c0:	7bbb      	ldrb	r3, [r7, #14]
 80003c2:	693a      	ldr	r2, [r7, #16]
 80003c4:	fa02 f303 	lsl.w	r3, r2, r3
 80003c8:	61bb      	str	r3, [r7, #24]
        pGPIOHandle->pGPIOx->CR[0] &= ~reset;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	6819      	ldr	r1, [r3, #0]
 80003d0:	69fb      	ldr	r3, [r7, #28]
 80003d2:	43da      	mvns	r2, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	400a      	ands	r2, r1
 80003da:	601a      	str	r2, [r3, #0]
        pGPIOHandle->pGPIOx->CR[0] |= set;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	6819      	ldr	r1, [r3, #0]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	69ba      	ldr	r2, [r7, #24]
 80003e8:	430a      	orrs	r2, r1
 80003ea:	601a      	str	r2, [r3, #0]
        reset = 0xF << position;
        set = mode << position;
        pGPIOHandle->pGPIOx->CR[1] &= ~reset;
        pGPIOHandle->pGPIOx->CR[1] |= set;
    }
}
 80003ec:	e025      	b.n	800043a <GPIO_ConfigMode+0xae>
    } else if (7 < pinNumber && pinNumber <= 15) {
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	2b07      	cmp	r3, #7
 80003f2:	d922      	bls.n	800043a <GPIO_ConfigMode+0xae>
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	2b0f      	cmp	r3, #15
 80003f8:	d81f      	bhi.n	800043a <GPIO_ConfigMode+0xae>
        uint8_t position = (pinNumber - 8) * 4;
 80003fa:	697b      	ldr	r3, [r7, #20]
 80003fc:	3b08      	subs	r3, #8
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	73fb      	strb	r3, [r7, #15]
        reset = 0xF << position;
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	220f      	movs	r2, #15
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	61fb      	str	r3, [r7, #28]
        set = mode << position;
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	693a      	ldr	r2, [r7, #16]
 8000412:	fa02 f303 	lsl.w	r3, r2, r3
 8000416:	61bb      	str	r3, [r7, #24]
        pGPIOHandle->pGPIOx->CR[1] &= ~reset;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	6859      	ldr	r1, [r3, #4]
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	43da      	mvns	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	400a      	ands	r2, r1
 8000428:	605a      	str	r2, [r3, #4]
        pGPIOHandle->pGPIOx->CR[1] |= set;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	6859      	ldr	r1, [r3, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	69ba      	ldr	r2, [r7, #24]
 8000436:	430a      	orrs	r2, r1
 8000438:	605a      	str	r2, [r3, #4]
}
 800043a:	bf00      	nop
 800043c:	3724      	adds	r7, #36	@ 0x24
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <GPIO_Init>:


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    //enable peripheral clock

    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff12 	bl	800027c <GPIO_PeriClockControl>

    //1. configure mode of pin
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode < GPIO_MODE_IT_FT )
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b0f      	cmp	r3, #15
 800045e:	f200 80a3 	bhi.w	80005a8 <GPIO_Init+0x164>
    {
        GPIO_ConfigMode(pGPIOHandle);
 8000462:	6878      	ldr	r0, [r7, #4]
 8000464:	f7ff ff92 	bl	800038c <GPIO_ConfigMode>
        if (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	79db      	ldrb	r3, [r3, #7]
 800046c:	2b00      	cmp	r3, #0
 800046e:	f000 809b 	beq.w	80005a8 <GPIO_Init+0x164>
        {
            if (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode ==  GPIO_MODE_IT_FT)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	79db      	ldrb	r3, [r3, #7]
 8000476:	2b10      	cmp	r3, #16
 8000478:	d117      	bne.n	80004aa <GPIO_Init+0x66>
            {
                EXTI->FTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800047a:	4b61      	ldr	r3, [pc, #388]	@ (8000600 <GPIO_Init+0x1bc>)
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	7912      	ldrb	r2, [r2, #4]
 8000482:	4611      	mov	r1, r2
 8000484:	2201      	movs	r2, #1
 8000486:	408a      	lsls	r2, r1
 8000488:	4611      	mov	r1, r2
 800048a:	4a5d      	ldr	r2, [pc, #372]	@ (8000600 <GPIO_Init+0x1bc>)
 800048c:	430b      	orrs	r3, r1
 800048e:	60d3      	str	r3, [r2, #12]
                EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000490:	4b5b      	ldr	r3, [pc, #364]	@ (8000600 <GPIO_Init+0x1bc>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	7912      	ldrb	r2, [r2, #4]
 8000498:	4611      	mov	r1, r2
 800049a:	2201      	movs	r2, #1
 800049c:	408a      	lsls	r2, r1
 800049e:	43d2      	mvns	r2, r2
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a57      	ldr	r2, [pc, #348]	@ (8000600 <GPIO_Init+0x1bc>)
 80004a4:	400b      	ands	r3, r1
 80004a6:	6093      	str	r3, [r2, #8]
 80004a8:	e035      	b.n	8000516 <GPIO_Init+0xd2>
            }
            else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode == GPIO_MODE_IT_RT)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	79db      	ldrb	r3, [r3, #7]
 80004ae:	2b11      	cmp	r3, #17
 80004b0:	d117      	bne.n	80004e2 <GPIO_Init+0x9e>
            {
                EXTI->RTSR |=  (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b2:	4b53      	ldr	r3, [pc, #332]	@ (8000600 <GPIO_Init+0x1bc>)
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	4611      	mov	r1, r2
 80004bc:	2201      	movs	r2, #1
 80004be:	408a      	lsls	r2, r1
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a4f      	ldr	r2, [pc, #316]	@ (8000600 <GPIO_Init+0x1bc>)
 80004c4:	430b      	orrs	r3, r1
 80004c6:	6093      	str	r3, [r2, #8]
                EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000600 <GPIO_Init+0x1bc>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7912      	ldrb	r2, [r2, #4]
 80004d0:	4611      	mov	r1, r2
 80004d2:	2201      	movs	r2, #1
 80004d4:	408a      	lsls	r2, r1
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a49      	ldr	r2, [pc, #292]	@ (8000600 <GPIO_Init+0x1bc>)
 80004dc:	400b      	ands	r3, r1
 80004de:	60d3      	str	r3, [r2, #12]
 80004e0:	e019      	b.n	8000516 <GPIO_Init+0xd2>
            }
            else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode == GPIO_MODE_IT_RFT)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	79db      	ldrb	r3, [r3, #7]
 80004e6:	2b12      	cmp	r3, #18
 80004e8:	d115      	bne.n	8000516 <GPIO_Init+0xd2>
            {
                EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ea:	4b45      	ldr	r3, [pc, #276]	@ (8000600 <GPIO_Init+0x1bc>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7912      	ldrb	r2, [r2, #4]
 80004f2:	4611      	mov	r1, r2
 80004f4:	2201      	movs	r2, #1
 80004f6:	408a      	lsls	r2, r1
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a41      	ldr	r2, [pc, #260]	@ (8000600 <GPIO_Init+0x1bc>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	6093      	str	r3, [r2, #8]
                EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000500:	4b3f      	ldr	r3, [pc, #252]	@ (8000600 <GPIO_Init+0x1bc>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7912      	ldrb	r2, [r2, #4]
 8000508:	4611      	mov	r1, r2
 800050a:	2201      	movs	r2, #1
 800050c:	408a      	lsls	r2, r1
 800050e:	4611      	mov	r1, r2
 8000510:	4a3b      	ldr	r2, [pc, #236]	@ (8000600 <GPIO_Init+0x1bc>)
 8000512:	430b      	orrs	r3, r1
 8000514:	60d3      	str	r3, [r2, #12]
            }

            uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	089b      	lsrs	r3, r3, #2
 800051c:	73fb      	strb	r3, [r7, #15]
            uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	f003 0303 	and.w	r3, r3, #3
 8000526:	73bb      	strb	r3, [r7, #14]
            uint8_t code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a35      	ldr	r2, [pc, #212]	@ (8000604 <GPIO_Init+0x1c0>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d01d      	beq.n	800056e <GPIO_Init+0x12a>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a34      	ldr	r2, [pc, #208]	@ (8000608 <GPIO_Init+0x1c4>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d016      	beq.n	800056a <GPIO_Init+0x126>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a32      	ldr	r2, [pc, #200]	@ (800060c <GPIO_Init+0x1c8>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d00f      	beq.n	8000566 <GPIO_Init+0x122>
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a31      	ldr	r2, [pc, #196]	@ (8000610 <GPIO_Init+0x1cc>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d008      	beq.n	8000562 <GPIO_Init+0x11e>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a2f      	ldr	r2, [pc, #188]	@ (8000614 <GPIO_Init+0x1d0>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d101      	bne.n	800055e <GPIO_Init+0x11a>
 800055a:	2304      	movs	r3, #4
 800055c:	e008      	b.n	8000570 <GPIO_Init+0x12c>
 800055e:	2300      	movs	r3, #0
 8000560:	e006      	b.n	8000570 <GPIO_Init+0x12c>
 8000562:	2303      	movs	r3, #3
 8000564:	e004      	b.n	8000570 <GPIO_Init+0x12c>
 8000566:	2302      	movs	r3, #2
 8000568:	e002      	b.n	8000570 <GPIO_Init+0x12c>
 800056a:	2301      	movs	r3, #1
 800056c:	e000      	b.n	8000570 <GPIO_Init+0x12c>
 800056e:	2300      	movs	r3, #0
 8000570:	737b      	strb	r3, [r7, #13]

            AFIO_PCLK_EN();
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <GPIO_Init+0x1d4>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a28      	ldr	r2, [pc, #160]	@ (8000618 <GPIO_Init+0x1d4>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
            AFIO->EXTICR[temp1] = code << (temp2 * 4);
 800057e:	7b7a      	ldrb	r2, [r7, #13]
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	fa02 f103 	lsl.w	r1, r2, r3
 8000588:	4a24      	ldr	r2, [pc, #144]	@ (800061c <GPIO_Init+0x1d8>)
 800058a:	7bfb      	ldrb	r3, [r7, #15]
 800058c:	3302      	adds	r3, #2
 800058e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

            EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <GPIO_Init+0x1bc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	7912      	ldrb	r2, [r2, #4]
 800059a:	4611      	mov	r1, r2
 800059c:	2201      	movs	r2, #1
 800059e:	408a      	lsls	r2, r1
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a17      	ldr	r2, [pc, #92]	@ (8000600 <GPIO_Init+0x1bc>)
 80005a4:	430b      	orrs	r3, r1
 80005a6:	6013      	str	r3, [r2, #0]
    
    //2. configure speed
    //No need because in mode we have already configured the speed

    //3. configure pupd setting
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl != GPIO_PIN_NO_PUPD)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	799b      	ldrb	r3, [r3, #6]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d023      	beq.n	80005f8 <GPIO_Init+0x1b4>
        //     temp = pGPIOHandle->pGPIOx->CRH.REGS & ~(0xF << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8) * 4);
        //     temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8) * 4);
        //     pGPIOHandle->pGPIOx->CRH.REGS |= temp;
        // }

        if (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl == GPIO_PIN_PU)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	799b      	ldrb	r3, [r3, #6]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d10d      	bne.n	80005d4 <GPIO_Init+0x190>
        {
            pGPIOHandle->pGPIOx->ODR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	68da      	ldr	r2, [r3, #12]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	791b      	ldrb	r3, [r3, #4]
 80005c2:	4619      	mov	r1, r3
 80005c4:	2301      	movs	r3, #1
 80005c6:	408b      	lsls	r3, r1
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	430a      	orrs	r2, r1
 80005d0:	60da      	str	r2, [r3, #12]

    //5. configure alternate function
    //No need because in mode we have already configured the alternate function
    

}
 80005d2:	e011      	b.n	80005f8 <GPIO_Init+0x1b4>
        else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl == GPIO_PIN_PD)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	799b      	ldrb	r3, [r3, #6]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d10d      	bne.n	80005f8 <GPIO_Init+0x1b4>
            pGPIOHandle->pGPIOx->ODR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	68da      	ldr	r2, [r3, #12]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	4619      	mov	r1, r3
 80005e8:	2301      	movs	r3, #1
 80005ea:	408b      	lsls	r3, r1
 80005ec:	43db      	mvns	r3, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	400a      	ands	r2, r1
 80005f6:	60da      	str	r2, [r3, #12]
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40010400 	.word	0x40010400
 8000604:	40010800 	.word	0x40010800
 8000608:	40010c00 	.word	0x40010c00
 800060c:	40011000 	.word	0x40011000
 8000610:	40011400 	.word	0x40011400
 8000614:	40011800 	.word	0x40011800
 8000618:	40021000 	.word	0x40021000
 800061c:	40010000 	.word	0x40010000

08000620 <I2C_GenerateStartCondition>:
#include "stm32f1_i2c.h"
#include "stm32f1_rcc.h"

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
    pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	601a      	str	r2, [r3, #0]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr);
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	460b      	mov	r3, r1
 8000648:	70fb      	strb	r3, [r7, #3]
    SlaveAddr = SlaveAddr << 1;
 800064a:	78fb      	ldrb	r3, [r7, #3]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	70fb      	strb	r3, [r7, #3]
    SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/w bit = 0
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	f023 0301 	bic.w	r3, r3, #1
 8000656:	70fb      	strb	r3, [r7, #3]
    pI2Cx->DR = SlaveAddr;
 8000658:	78fa      	ldrb	r2, [r7, #3]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	611a      	str	r2, [r3, #16]
}
 800065e:	bf00      	nop
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle);
static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
    uint32_t dummy_read;
    //Check for Device Mode
    if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	2b00      	cmp	r3, #0
 800067c:	d01f      	beq.n	80006be <I2C_ClearADDRFlag+0x56>
    {
        if (pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7f1b      	ldrb	r3, [r3, #28]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d112      	bne.n	80006ac <I2C_ClearADDRFlag+0x44>
        {
            if(pI2CHandle->RxSize == 1)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	6a1b      	ldr	r3, [r3, #32]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d11f      	bne.n	80006ce <I2C_ClearADDRFlag+0x66>
            {
                //First disable the ACK
                I2C_ManageAcKing(pI2CHandle->pI2Cx, DISABLE);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f000 f9b0 	bl	80009fa <I2C_ManageAcKing>

                //Clear the ADDR flag (Read SR1 and Read SR2)
                dummy_read = pI2CHandle->pI2Cx->SR1;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	60fb      	str	r3, [r7, #12]
                dummy_read = pI2CHandle->pI2Cx->SR2;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	60fb      	str	r3, [r7, #12]
        //Clear the ADDR flag (Read SR1 and Read SR2)
        dummy_read = pI2CHandle->pI2Cx->SR1;
        dummy_read = pI2CHandle->pI2Cx->SR2;
        (void)dummy_read;
    }
}
 80006aa:	e010      	b.n	80006ce <I2C_ClearADDRFlag+0x66>
            dummy_read = pI2CHandle->pI2Cx->SR1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	60fb      	str	r3, [r7, #12]
            dummy_read = pI2CHandle->pI2Cx->SR2;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	60fb      	str	r3, [r7, #12]
}
 80006bc:	e007      	b.n	80006ce <I2C_ClearADDRFlag+0x66>
        dummy_read = pI2CHandle->pI2Cx->SR1;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	695b      	ldr	r3, [r3, #20]
 80006c4:	60fb      	str	r3, [r7, #12]
        dummy_read = pI2CHandle->pI2Cx->SR2;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	60fb      	str	r3, [r7, #12]
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <I2C_PeripheralControl>:
    }
}


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	460b      	mov	r3, r1
 80006e0:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d106      	bne.n	80006f6 <I2C_PeripheralControl+0x20>
    {
        pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f043 0201 	orr.w	r2, r3, #1
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
    }
}
 80006f4:	e005      	b.n	8000702 <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f023 0201 	bic.w	r2, r3, #1
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <I2C_PeriClockControl>:

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	460b      	mov	r3, r1
 8000716:	70fb      	strb	r3, [r7, #3]
    if(EnOrDi == ENABLE)
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d115      	bne.n	800074a <I2C_PeriClockControl+0x3e>
    {
        if(pI2Cx == I2C1)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4a17      	ldr	r2, [pc, #92]	@ (8000780 <I2C_PeriClockControl+0x74>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d106      	bne.n	8000734 <I2C_PeriClockControl+0x28>
        {
            I2C1_PCLK_EN();
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <I2C_PeriClockControl+0x78>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a16      	ldr	r2, [pc, #88]	@ (8000784 <I2C_PeriClockControl+0x78>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000730:	61d3      	str	r3, [r2, #28]
        else if(pI2Cx == I2C2)
        {
            I2C2_PCLK_DI();
        }          
    }
}
 8000732:	e01f      	b.n	8000774 <I2C_PeriClockControl+0x68>
        else if(pI2Cx == I2C2)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <I2C_PeriClockControl+0x7c>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d11b      	bne.n	8000774 <I2C_PeriClockControl+0x68>
            I2C2_PCLK_EN();
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <I2C_PeriClockControl+0x78>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	4a10      	ldr	r2, [pc, #64]	@ (8000784 <I2C_PeriClockControl+0x78>)
 8000742:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000746:	61d3      	str	r3, [r2, #28]
}
 8000748:	e014      	b.n	8000774 <I2C_PeriClockControl+0x68>
        if(pI2Cx == I2C1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4a0c      	ldr	r2, [pc, #48]	@ (8000780 <I2C_PeriClockControl+0x74>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d106      	bne.n	8000760 <I2C_PeriClockControl+0x54>
            I2C1_PCLK_DI();
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <I2C_PeriClockControl+0x78>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a0b      	ldr	r2, [pc, #44]	@ (8000784 <I2C_PeriClockControl+0x78>)
 8000758:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800075c:	61d3      	str	r3, [r2, #28]
}
 800075e:	e009      	b.n	8000774 <I2C_PeriClockControl+0x68>
        else if(pI2Cx == I2C2)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <I2C_PeriClockControl+0x7c>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d105      	bne.n	8000774 <I2C_PeriClockControl+0x68>
            I2C2_PCLK_DI();
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <I2C_PeriClockControl+0x78>)
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <I2C_PeriClockControl+0x78>)
 800076e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000772:	61d3      	str	r3, [r2, #28]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40005400 	.word	0x40005400
 8000784:	40021000 	.word	0x40021000
 8000788:	40005800 	.word	0x40005800

0800078c <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]

    I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2101      	movs	r1, #1
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ffb4 	bl	800070c <I2C_PeriClockControl>

    //////////////////Begin CR1/////////////////////////
    //ACK
    temp |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7a5b      	ldrb	r3, [r3, #9]
 80007a8:	029b      	lsls	r3, r3, #10
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->CR1 = temp;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	601a      	str	r2, [r3, #0]
    ///////////////////End CR1//////////////////////////

    //////////////////Begin CR2/////////////////////////
    //FREG CR2
    temp = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
    temp |= RCC_GetPCLK1Value() / 1000000U;
 80007bc:	f000 f938 	bl	8000a30 <RCC_GetPCLK1Value>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a48      	ldr	r2, [pc, #288]	@ (80008e4 <I2C_Init+0x158>)
 80007c4:	fba2 2303 	umull	r2, r3, r2, r3
 80007c8:	0c9b      	lsrs	r3, r3, #18
 80007ca:	68fa      	ldr	r2, [r7, #12]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]

    pI2CHandle->pI2Cx->CR2 = temp & 0x3F;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80007da:	605a      	str	r2, [r3, #4]
    //////////////////End CR2///////////////////////////

    //////////////////Begin OAR1/////////////////////////
    temp = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
    temp |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7a1b      	ldrb	r3, [r3, #8]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
    temp |= 1 << 14;        //Should always be kept at 1 by Sofware
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f2:	60fb      	str	r3, [r7, #12]
    pI2CHandle->pI2Cx->OAR1 = temp;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	609a      	str	r2, [r3, #8]
    //////////////////End OAR1/////////////////////////

    //////////////////Begin CCR/////////////////////////
    temp = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
    uint16_t ccr_value = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	817b      	strh	r3, [r7, #10]

    if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f242 7210 	movw	r2, #10000	@ 0x2710
 800080c:	4293      	cmp	r3, r2
 800080e:	d80f      	bhi.n	8000830 <I2C_Init+0xa4>
    {
        //Standard Mode
        ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000810:	f000 f90e 	bl	8000a30 <RCC_GetPCLK1Value>
 8000814:	4602      	mov	r2, r0
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000820:	817b      	strh	r3, [r7, #10]
        temp |= (ccr_value & 0xFFF);
 8000822:	897b      	ldrh	r3, [r7, #10]
 8000824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	4313      	orrs	r3, r2
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	e02c      	b.n	800088a <I2C_Init+0xfe>
    }
    else
    {
        //Fast Mode
        temp |= (1 << 15);
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000836:	60fb      	str	r3, [r7, #12]
        temp |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7a9b      	ldrb	r3, [r3, #10]
 800083c:	039b      	lsls	r3, r3, #14
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	4313      	orrs	r3, r2
 8000842:	60fb      	str	r3, [r7, #12]

        //Check DUTY
        if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	7a9b      	ldrb	r3, [r3, #10]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d10b      	bne.n	8000864 <I2C_Init+0xd8>
        {
            ccr_value = (RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 800084c:	f000 f8f0 	bl	8000a30 <RCC_GetPCLK1Value>
 8000850:	4601      	mov	r1, r0
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	4613      	mov	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	4413      	add	r3, r2
 800085c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000860:	817b      	strh	r3, [r7, #10]
 8000862:	e00c      	b.n	800087e <I2C_Init+0xf2>
        }
        else
        {
            ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000864:	f000 f8e4 	bl	8000a30 <RCC_GetPCLK1Value>
 8000868:	4601      	mov	r1, r0
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685a      	ldr	r2, [r3, #4]
 800086e:	4613      	mov	r3, r2
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	009a      	lsls	r2, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	fbb1 f3f3 	udiv	r3, r1, r3
 800087c:	817b      	strh	r3, [r7, #10]
        }

        temp |= ccr_value & 0xFFF;
 800087e:	897b      	ldrh	r3, [r7, #10]
 8000880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	4313      	orrs	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
    }
    pI2CHandle->pI2Cx->OAR1 = temp;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	609a      	str	r2, [r3, #8]
    //////////////////End CCR/////////////////////////

    //////////////////Begin TRISE/////////////////////////
    if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f242 7210 	movw	r2, #10000	@ 0x2710
 800089a:	4293      	cmp	r3, r2
 800089c:	d809      	bhi.n	80008b2 <I2C_Init+0x126>
    {
        //Standard Mode
        temp = (RCC_GetPCLK1Value() / 1000000) + 1;
 800089e:	f000 f8c7 	bl	8000a30 <RCC_GetPCLK1Value>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4a0f      	ldr	r2, [pc, #60]	@ (80008e4 <I2C_Init+0x158>)
 80008a6:	fba2 2303 	umull	r2, r3, r2, r3
 80008aa:	0c9b      	lsrs	r3, r3, #18
 80008ac:	3301      	adds	r3, #1
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	e00d      	b.n	80008ce <I2C_Init+0x142>
    }
    else
    {
        //Fast Mode
        temp = ((RCC_GetPCLK1Value() * 300) / 1000000000) + 1;
 80008b2:	f000 f8bd 	bl	8000a30 <RCC_GetPCLK1Value>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	0a5b      	lsrs	r3, r3, #9
 80008c2:	4a09      	ldr	r2, [pc, #36]	@ (80008e8 <I2C_Init+0x15c>)
 80008c4:	fba2 2303 	umull	r2, r3, r2, r3
 80008c8:	09db      	lsrs	r3, r3, #7
 80008ca:	3301      	adds	r3, #1
 80008cc:	60fb      	str	r3, [r7, #12]
    }
    pI2CHandle->pI2Cx->TRISE = (temp & 0x3F);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80008d8:	621a      	str	r2, [r3, #32]
    //////////////////End TRISE/////////////////////////
}
 80008da:	bf00      	nop
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	431bde83 	.word	0x431bde83
 80008e8:	00044b83 	.word	0x00044b83

080008ec <I2C_GetFlagStatus>:

void I2C_DeInit(I2C_RegDef_t *pI2Cx);

uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t StatusflagName)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
    uint8_t status = RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]
    if(pI2Cx->SR1 & StatusflagName)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	695a      	ldr	r2, [r3, #20]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	4013      	ands	r3, r2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <I2C_GetFlagStatus+0x1e>
    {
        status = SET;
 8000906:	2301      	movs	r3, #1
 8000908:	73fb      	strb	r3, [r7, #15]
    }
    return status;
 800090a:	7bfb      	ldrb	r3, [r7, #15]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
    pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	601a      	str	r2, [r3, #0]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <I2C_MasterSendData>:

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint32_t len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	70fb      	strb	r3, [r7, #3]
    //Start Condition
    I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff fe6a 	bl	8000620 <I2C_GenerateStartCondition>

    //Checking the flag in the SR1 => CLK = LOW
    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB));
 800094c:	bf00      	nop
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffc9 	bl	80008ec <I2C_GetFlagStatus>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f6      	beq.n	800094e <I2C_MasterSendData+0x1a>

    //Send address data and bir read/write
    I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, SlaveAddr);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	78fa      	ldrb	r2, [r7, #3]
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fe68 	bl	800063e <I2C_ExecuteAddressPhaseWrite>

    //Checking the ADDR flag in the SR1
    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR));
 800096e:	bf00      	nop
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2102      	movs	r1, #2
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff ffb8 	bl	80008ec <I2C_GetFlagStatus>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f6      	beq.n	8000970 <I2C_MasterSendData+0x3c>

    //Clear the ADDR flag, SCL = LOW
    I2C_ClearADDRFlag(pI2CHandle);
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f7ff fe70 	bl	8000668 <I2C_ClearADDRFlag>

    //Send the data untill len become 0
    while(len > 0)
 8000988:	e014      	b.n	80009b4 <I2C_MasterSendData+0x80>
    {
        while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); //Wait till TXE is set
 800098a:	bf00      	nop
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2180      	movs	r1, #128	@ 0x80
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ffaa 	bl	80008ec <I2C_GetFlagStatus>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f6      	beq.n	800098c <I2C_MasterSendData+0x58>
        pI2CHandle->pI2Cx->DR = *pTxBuffer;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	611a      	str	r2, [r3, #16]
        pTxBuffer++;
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	3301      	adds	r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
        len--;     
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	3b01      	subs	r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
    while(len > 0)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1e7      	bne.n	800098a <I2C_MasterSendData+0x56>
    }

    //when Len becomes 0 wait for flag TXE = 1 and BTF = 1 before ganerating the STOP condition
    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE)); //Wait till TXE is set
 80009ba:	bf00      	nop
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2180      	movs	r1, #128	@ 0x80
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff92 	bl	80008ec <I2C_GetFlagStatus>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0f6      	beq.n	80009bc <I2C_MasterSendData+0x88>
    while (!I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF)); //Wait till BTF is set
 80009ce:	bf00      	nop
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2104      	movs	r1, #4
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff ff88 	bl	80008ec <I2C_GetFlagStatus>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0f6      	beq.n	80009d0 <I2C_MasterSendData+0x9c>

    //Generate STOP condition
    //Note: generating STOP, automatically 

    if(Sr == I2C_DISABLE_SR)
 80009e2:	7e3b      	ldrb	r3, [r7, #24]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <I2C_MasterSendData+0xbe>
    {
        I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff92 	bl	8000916 <I2C_GenerateStopCondition>
    }

}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <I2C_ManageAcKing>:

void I2C_ManageAcKing(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == I2C_ACK_ENABLE)
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d106      	bne.n	8000a1a <I2C_ManageAcKing+0x20>
    {
        //Enable the ACK
        pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
    else
    {
        //Disable the ACK
        pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
    }
}
 8000a18:	e005      	b.n	8000a26 <I2C_ManageAcKing+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <RCC_GetPCLK1Value>:

uint16_t AHB_PreScaler[9] = {2, 4, 8, 16, 32, 64, 128, 256, 512};
uint8_t APB1_PreScaler[4] = {2, 4, 8, 16};
//This return APB1 clock value
uint32_t RCC_GetPCLK1Value(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
    uint32_t pclk1, SystemClk;
    uint8_t clkscr, temp, ahbp, apb1p;
    clkscr = (RCC->CFGR >> 2 & 0x03);
 8000a36:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <RCC_GetPCLK1Value+0x9c>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	727b      	strb	r3, [r7, #9]

    if(clkscr == 0)
 8000a44:	7a7b      	ldrb	r3, [r7, #9]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d102      	bne.n	8000a50 <RCC_GetPCLK1Value+0x20>
    {
        SystemClk = 8000000;        //HSI
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <RCC_GetPCLK1Value+0xa0>)
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	e00b      	b.n	8000a68 <RCC_GetPCLK1Value+0x38>
    }
    else if(clkscr == 1)
 8000a50:	7a7b      	ldrb	r3, [r7, #9]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d102      	bne.n	8000a5c <RCC_GetPCLK1Value+0x2c>
    {
        SystemClk = 8000000;        //HSE
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <RCC_GetPCLK1Value+0xa0>)
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	e005      	b.n	8000a68 <RCC_GetPCLK1Value+0x38>
    }
    else if(clkscr == 2)
 8000a5c:	7a7b      	ldrb	r3, [r7, #9]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d102      	bne.n	8000a68 <RCC_GetPCLK1Value+0x38>
    {
        SystemClk = RCC_GetPLLOutputClock();
 8000a62:	f000 f83b 	bl	8000adc <RCC_GetPLLOutputClock>
 8000a66:	60f8      	str	r0, [r7, #12]
    }

    //AHB
    temp = ((RCC->CFGR >> 4) & 0xF);
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <RCC_GetPCLK1Value+0x9c>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	f003 030f 	and.w	r3, r3, #15
 8000a74:	723b      	strb	r3, [r7, #8]
    if(temp < 8)
 8000a76:	7a3b      	ldrb	r3, [r7, #8]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	d802      	bhi.n	8000a82 <RCC_GetPCLK1Value+0x52>
    {
        ahbp = 1;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	72fb      	strb	r3, [r7, #11]
 8000a80:	e005      	b.n	8000a8e <RCC_GetPCLK1Value+0x5e>
    }
    else
    {
        ahbp = AHB_PreScaler[temp - 8];
 8000a82:	7a3b      	ldrb	r3, [r7, #8]
 8000a84:	3b08      	subs	r3, #8
 8000a86:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <RCC_GetPCLK1Value+0xa4>)
 8000a88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a8c:	72fb      	strb	r3, [r7, #11]
    }
    
    //APB1
    temp = ((RCC->CFGR >> 8) & 0x7);
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <RCC_GetPCLK1Value+0x9c>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	723b      	strb	r3, [r7, #8]
    if(temp < 4)
 8000a9c:	7a3b      	ldrb	r3, [r7, #8]
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d802      	bhi.n	8000aa8 <RCC_GetPCLK1Value+0x78>
    {
        apb1p = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	72bb      	strb	r3, [r7, #10]
 8000aa6:	e004      	b.n	8000ab2 <RCC_GetPCLK1Value+0x82>
    }
    else
    {
        apb1p = APB1_PreScaler[temp - 4];
 8000aa8:	7a3b      	ldrb	r3, [r7, #8]
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <RCC_GetPCLK1Value+0xa8>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	72bb      	strb	r3, [r7, #10]
    }

    pclk1 = (SystemClk / ahbp) / apb1p;
 8000ab2:	7afb      	ldrb	r3, [r7, #11]
 8000ab4:	68fa      	ldr	r2, [r7, #12]
 8000ab6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000aba:	7abb      	ldrb	r3, [r7, #10]
 8000abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac0:	607b      	str	r3, [r7, #4]
    return pclk1;
 8000ac2:	687b      	ldr	r3, [r7, #4]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	007a1200 	.word	0x007a1200
 8000ad4:	20000014 	.word	0x20000014
 8000ad8:	20000028 	.word	0x20000028

08000adc <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
    return 0;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr
	...

08000aec <__libc_init_array>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	2600      	movs	r6, #0
 8000af0:	4d0c      	ldr	r5, [pc, #48]	@ (8000b24 <__libc_init_array+0x38>)
 8000af2:	4c0d      	ldr	r4, [pc, #52]	@ (8000b28 <__libc_init_array+0x3c>)
 8000af4:	1b64      	subs	r4, r4, r5
 8000af6:	10a4      	asrs	r4, r4, #2
 8000af8:	42a6      	cmp	r6, r4
 8000afa:	d109      	bne.n	8000b10 <__libc_init_array+0x24>
 8000afc:	f000 f81a 	bl	8000b34 <_init>
 8000b00:	2600      	movs	r6, #0
 8000b02:	4d0a      	ldr	r5, [pc, #40]	@ (8000b2c <__libc_init_array+0x40>)
 8000b04:	4c0a      	ldr	r4, [pc, #40]	@ (8000b30 <__libc_init_array+0x44>)
 8000b06:	1b64      	subs	r4, r4, r5
 8000b08:	10a4      	asrs	r4, r4, #2
 8000b0a:	42a6      	cmp	r6, r4
 8000b0c:	d105      	bne.n	8000b1a <__libc_init_array+0x2e>
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b14:	4798      	blx	r3
 8000b16:	3601      	adds	r6, #1
 8000b18:	e7ee      	b.n	8000af8 <__libc_init_array+0xc>
 8000b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1e:	4798      	blx	r3
 8000b20:	3601      	adds	r6, #1
 8000b22:	e7f2      	b.n	8000b0a <__libc_init_array+0x1e>
 8000b24:	08000b54 	.word	0x08000b54
 8000b28:	08000b54 	.word	0x08000b54
 8000b2c:	08000b54 	.word	0x08000b54
 8000b30:	08000b58 	.word	0x08000b58

08000b34 <_init>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	bf00      	nop
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr

08000b40 <_fini>:
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b42:	bf00      	nop
 8000b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b46:	bc08      	pop	{r3}
 8000b48:	469e      	mov	lr, r3
 8000b4a:	4770      	bx	lr
